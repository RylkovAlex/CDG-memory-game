{"version":3,"sources":["redux/action-creator/action.ts","redux/reducers/user-reducer/user-reducer.ts","components/pages/results-page/results-page.tsx","redux/reducers/game-reducer/game-reducer.ts","redux/reducers/root-reducer/root-reducer.ts","constants/constants.ts","utils/storage.ts","redux/action-creator/action-creator.ts","components/pages/auth-page/auth-page.tsx","components/header-component/header-component.tsx","components/footer-component/footer-component.tsx","components/layout-component/layout-component.tsx","components/game-screens/welcome-screen/welcome-screen.tsx","utils/utils.ts","components/game-card/game-card.tsx","components/gameboard-component/gameboard-component.tsx","components/game-info/game-info.tsx","components/game-screens/game-screen/game-screen.tsx","components/game-screens/win-screen/win-screen.tsx","components/app-component/App.tsx","routes.tsx","serviceWorker.ts","index.tsx"],"names":["GameActions","UserActions","Sort","userInitialState","name","results","isLogged","userReducer","state","action","type","SET_USER","payload","PUSH_NEW_RESULT","LOG_OUT","gameInitialState","round","mistakes","timer","isFinished","gameReducer","INCREMENT_ROUND","Object","assign","INCREMENT_MISTAKES","FINISH_GAME","RESET_GAME","TICK_TIMER","combineReducers","user","game","width","height","storage","storageName","this","localStorage","getItem","admin","date","Date","now","time","setItem","JSON","stringify","parse","find","users","getUsers","forEach","result","push","newData","setUsers","index","findIndex","u","map","constants","saveNewResult","length","currentUser","getUser","logIn","newUser","addUser","logOut","connect","dispatch","actionCreator","useState","form","setForm","className","style","paddingBottom","marginBottom","value","id","minLength","maxLength","onChange","event","target","htmlFor","marginRight","disabled","trim","onClick","userName","ownProps","history","useHistory","to","evt","preventDefault","Footer","getFullYear","href","Layout","children","rules","rule","key","ResultPage","sort","setSort","getResults","a","b","Mistakes","TimeSpend","Default","toLocaleString","TabelItem","getMixed","array","i","j","Math","floor","random","size","GameCard","data","handleClick","isDone","isOpened","cardClasses","join","src","alt","GameBoard","props","gameTimerId","gameStateTimers","cards","createCards","names","createCard","resetGame","setInterval","tickTimer","clearInterval","clearTimeout","saveResult","finishGame","card","setState","c","check","opened","filter","first","second","firstIndx","secondIndx","incrementRound","setTimeout","incrementMistakes","bind","React","Component","withRouter","GameScreen","isGameFinished","setUser","useEffect","getLoggedUser","routes","isUser","path","exact","getRoutes","Boolean","window","location","hostname","match","enhancer","compose","applyMiddleware","store","createStore","rootReducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.468c4fb5.chunk.js","sourcesContent":["export enum GameActions {\r\n  INCREMENT_ROUND = `INCREMENT_STEP`,\r\n  INCREMENT_MISTAKES = `INCREMENT_MISTAKES`,\r\n  RESET_GAME = `RESET_GAME`,\r\n  TICK_TIMER = `TICK_TIMER`,\r\n  FINISH_GAME = `FINISH_GAME`,\r\n}\r\n\r\nexport enum UserActions {\r\n  SET_USER = `SET_USER`,\r\n  PUSH_NEW_RESULT = `PUSH_NEW_RESULT`,\r\n  LOG_OUT = `LOG_OUT`,\r\n}\r\n","import { UserActions } from \"src/redux/action-creator/action\";\r\n\r\nconst userInitialState: UserState = {\r\n  name: \"Guest\",\r\n  results: [],\r\n  isLogged: false,\r\n};\r\n\r\nconst userReducer = (\r\n  state: UserState = userInitialState,\r\n  action: ReducerAction\r\n) => {\r\n  switch (action.type) {\r\n    case UserActions.SET_USER:\r\n      return action.payload;\r\n    case UserActions.PUSH_NEW_RESULT:\r\n      const results = [...state.results, action.payload];\r\n      return { ...state, results };\r\n    case UserActions.LOG_OUT:\r\n      return userInitialState;\r\n  }\r\n  return state;\r\n};\r\n\r\nexport default userReducer;\r\n","import React, { useState } from \"react\";\r\nimport \"./results-page.css\";\r\nimport { storage } from \"src/utils/storage\";\r\n\r\nconst TabelItem: React.FC<Result> = (result: Result) => (\r\n  <tr key={result.date}>\r\n    <td>{result.name}</td>\r\n    <td>{new Date(result.date).toLocaleString()}</td>\r\n    <td>{`${result.time} sec`}</td>\r\n    <td>{result.mistakes}</td>\r\n  </tr>\r\n);\r\n\r\nenum Sort {\r\n  Date = \"date\",\r\n  Mistakes = \"mistakes\",\r\n  TimeSpend = \"time\",\r\n  Default = \"default\",\r\n}\r\n\r\nconst ResultPage: React.FC<{}> = () => {\r\n  const [sort, setSort] = useState(\"default\");\r\n  let results;\r\n  switch (sort) {\r\n    case Sort.Date:\r\n      results = storage.getResults().sort((a, b) => b.date - a.date);\r\n      break;\r\n    case Sort.Mistakes:\r\n      results = storage.getResults().sort((a, b) => b.mistakes - a.mistakes);\r\n      break;\r\n    case Sort.TimeSpend:\r\n      results = storage.getResults().sort((a, b) => b.time - a.time);\r\n      break;\r\n    default:\r\n      results = storage.getResults().sort((a, b) => b.date - a.date);\r\n  }\r\n  return (\r\n    <>\r\n      <h3 className=\"center-align results\">Here you can see best results</h3>\r\n      <table className=\"responsive-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>User Name</th>\r\n            <th>\r\n              <p\r\n                className={`btn blue lighten-1 ${(sort === Sort.Default || sort === Sort.Date) ? 'disabled' : ''}`}\r\n                onClick={() => setSort(Sort.Date)}\r\n              >\r\n                Game Date\r\n              </p>\r\n            </th>\r\n            <th>\r\n              <p\r\n                className={`btn blue lighten-1 ${(sort === Sort.TimeSpend) ? 'disabled' : ''}`}\r\n                onClick={() => setSort(Sort.TimeSpend)}\r\n              >\r\n                Time spend\r\n              </p>\r\n            </th>\r\n            <th>\r\n              <p\r\n                className={`btn blue lighten-1 ${(sort === Sort.Mistakes) ? 'disabled' : ''}`}\r\n                onClick={() => setSort(Sort.Mistakes)}\r\n              >\r\n                Mistakes\r\n              </p>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>{results.map((result) => TabelItem(result))}</tbody>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ResultPage;\r\n","import { GameActions } from \"../../action-creator/action\";\r\n\r\nconst gameInitialState: GameState = {\r\n  round: 0,\r\n  mistakes: 0,\r\n  timer: 0,\r\n  isFinished: false,\r\n};\r\n\r\nconst gameReducer = (state: GameState = gameInitialState, action: ReducerAction) => {\r\n  switch (action.type) {\r\n    case GameActions.INCREMENT_ROUND:\r\n      return Object.assign({}, state, {\r\n        round: state.round + action.payload,\r\n      });\r\n    case GameActions.INCREMENT_MISTAKES:\r\n      return ({\r\n        ...state,\r\n        mistakes: state.mistakes + action.payload\r\n      });\r\n    case GameActions.FINISH_GAME:\r\n      return ({\r\n        ...state,\r\n        isFinished: true,\r\n      });\r\n    case GameActions.RESET_GAME:\r\n      return Object.assign({}, gameInitialState);\r\n    case GameActions.TICK_TIMER:\r\n      return Object.assign({}, state, {\r\n        timer: state.timer + 1,\r\n      });\r\n  }\r\n  return state;\r\n};\r\n\r\nexport default gameReducer;\r\n","import { combineReducers } from 'redux';\r\nimport userReducer from '../user-reducer/user-reducer'\r\nimport gameReducer from '../game-reducer/game-reducer';\r\n\r\nexport interface appState {\r\n  user: UserState,\r\n  game: GameState\r\n}\r\n\r\nexport default combineReducers({\r\n  user: userReducer,\r\n  game: gameReducer\r\n})\r\n","export default {\r\n  STORAGE_NAME: 'MEMORY-GAME',\r\n  PARH_TO_CARD_IMG: 'https://rylkovalex.github.io/CDG-memory-game/',\r\n  CARDS: ['angular','babel','react','npm','nodejs','redux','vue','ts'],\r\n  GAME_BOARD_SIZE: {\r\n    width: 4,\r\n    height: 4,\r\n  },\r\n}\r\n","import constants from \"src/constants/constants\";\r\n\r\nclass Storage {\r\n  private storage: string;\r\n\r\n  constructor(storageName: string) {\r\n    this.storage = storageName;\r\n    if (!localStorage.getItem(storageName)) {\r\n      // ofcourse in localStorage should be just [], but ... you know ^^\r\n      const admin = [\r\n        {\r\n          name: \"Aleksandr Rylkov\",\r\n          results: [{ date: Date.now(), mistakes: 0, time: 5 }],\r\n          isLogged: false,\r\n        },\r\n      ];\r\n      localStorage.setItem(storageName, JSON.stringify(admin));\r\n    }\r\n  }\r\n\r\n  getUser(name: string) {\r\n    return JSON.parse(localStorage.getItem(this.storage)!).find(\r\n      (user: UserState) => user.name === name\r\n    );\r\n  }\r\n\r\n  getResults() {\r\n    const users = this.getUsers();\r\n    const results: Result[] = [];\r\n    users.forEach((user) => {\r\n      user.results.forEach((result) => {\r\n        results.push({\r\n          name: user.name,\r\n          date: result.date,\r\n          mistakes: result.mistakes,\r\n          time: result.time,\r\n        });\r\n      });\r\n    });\r\n    return results;\r\n  }\r\n\r\n  getCurrentUser(name: string) {\r\n    return JSON.parse(localStorage.getItem(this.storage)!).find(\r\n      (user: UserState) => user.isLogged\r\n    );\r\n  }\r\n\r\n  addUser(user: UserState) {\r\n    const newData = [...this.getUsers(), user];\r\n    this.setUsers(newData);\r\n  }\r\n\r\n  getUsers(): UserState[] {\r\n    return JSON.parse(localStorage.getItem(this.storage)!);\r\n  }\r\n\r\n  setUsers(users: UserState[]) {\r\n    localStorage.setItem(this.storage, JSON.stringify(users));\r\n  }\r\n\r\n  logIn(user: UserState) {\r\n    const users = this.getUsers();\r\n    const index = users.findIndex((u) => u.name === user.name);\r\n    users[index].isLogged = true;\r\n    this.setUsers(users);\r\n  }\r\n\r\n  saveNewResult(user: UserState, result: UserResult) {\r\n    const users = this.getUsers();\r\n    const index = users.findIndex((u) => u.name === user.name);\r\n    users[index].results = [...users[index].results, result];\r\n    this.setUsers(users);\r\n  }\r\n\r\n  logOut() {\r\n    const users = this.getUsers().map((user) => ({ ...user, isLogged: false }));\r\n    this.setUsers(users);\r\n  }\r\n\r\n  getLoggedUser() {\r\n    return this.getUsers().find((user) => user.isLogged);\r\n  }\r\n}\r\n\r\nexport const storage = new Storage(constants.STORAGE_NAME);\r\n","import { UserActions } from \"src/redux/action-creator/action\";\r\nimport { GameActions } from \"./action\";\r\nimport { storage } from \"src/utils/storage\";\r\n\r\nexport default {\r\n  incrementRound: () => ({\r\n    type: GameActions.INCREMENT_ROUND,\r\n    payload: 1,\r\n  }),\r\n\r\n  incrementMistakes: () => ({\r\n    type: GameActions.INCREMENT_MISTAKES,\r\n    payload: 1,\r\n  }),\r\n\r\n  tickTimer: () => ({\r\n    type: GameActions.TICK_TIMER,\r\n    payload: 1,\r\n  }),\r\n\r\n  finishGame: () => ({\r\n    type: GameActions.FINISH_GAME,\r\n  }),\r\n\r\n  resetGame: () => ({\r\n    type: GameActions.RESET_GAME,\r\n  }),\r\n\r\n  saveResult: (user:UserState, result: UserResult) => {\r\n    storage.saveNewResult(user, result);\r\n    return {\r\n      type: UserActions.PUSH_NEW_RESULT,\r\n      payload: result,\r\n    };\r\n  },\r\n\r\n  setUser: (user: UserState) => ({\r\n    type: UserActions.SET_USER,\r\n    payload: user,\r\n  }),\r\n\r\n  login: (name: string) => {\r\n    const users = storage.getUsers();\r\n    if (!users.length) {\r\n      const user = {\r\n        name,\r\n        results: [],\r\n        isLogged: true,\r\n      };\r\n      storage.setUsers([user]);\r\n      return {\r\n        type: UserActions.SET_USER,\r\n        payload: user,\r\n      };\r\n    }\r\n\r\n    const currentUser = storage.getUser(name);\r\n    if (currentUser) {\r\n      currentUser.isLogged = true;\r\n      storage.logIn(currentUser);\r\n      return {\r\n        type: UserActions.SET_USER,\r\n        payload: currentUser,\r\n      };\r\n    } else {\r\n      const newUser = {\r\n        name,\r\n        results: [],\r\n        isLogged: true,\r\n      };\r\n      storage.addUser(newUser);\r\n      return {\r\n        type: UserActions.SET_USER,\r\n        payload: newUser,\r\n      };\r\n    }\r\n  },\r\n\r\n  logOut: () => {\r\n    storage.logOut();\r\n    return {\r\n      type: UserActions.LOG_OUT,\r\n    };\r\n  },\r\n};\r\n","import React, { useState } from \"react\";\r\nimport actionCreator from \"src/redux/action-creator/action-creator\";\r\nimport { connect } from \"react-redux\";\r\n\r\ninterface AuthPageProps {\r\n  logIn: (name: string) => ReducerAction\r\n}\r\n\r\nconst AuthPage: React.FC<AuthPageProps> = ({ logIn }) => {\r\n  const [form, setForm] = useState({\r\n    name: \"\",\r\n  });\r\n\r\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setForm({ ...form, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  const loginHandler = (\r\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ) => {\r\n    const userName = form.name.trim();\r\n    logIn(userName);\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col s10\">\r\n        <h1>Welcome to Game</h1>\r\n        <div className=\"card blue darken-1\">\r\n          <div className=\"card-content white-text\" style={{ paddingBottom: 0 }}>\r\n            <span className=\"card-title\" style={{ marginBottom: 25 }}>\r\n              Remind me your name, please:\r\n            </span>\r\n            <div>\r\n              <div className=\"input-field\">\r\n                <input\r\n                  className=\"yellow-input\"\r\n                  value={form.name}\r\n                  id=\"name\"\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  minLength={3}\r\n                  maxLength={20}\r\n                  onChange={changeHandler}\r\n                />\r\n                <label htmlFor=\"name\">User Name:</label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"card-action\">\r\n            <button\r\n              className=\"btn yellow darken-4\"\r\n              style={{ marginRight: 10 }}\r\n              disabled={!form.name.trim()}\r\n              onClick={loginHandler}\r\n            >\r\n              Log In!\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Function) => ({\r\n  logIn: (name: string) => dispatch(actionCreator.login(name)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(AuthPage);\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from \"react\";\r\n\r\nimport { NavLink, useHistory } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport actionCreator from \"src/redux/action-creator/action-creator\";\r\nimport { appState } from \"src/redux/reducers/root-reducer/root-reducer\";\r\n\r\ninterface HeaderProps {\r\n  user?: UserState;\r\n  game?: GameState;\r\n  logOut: Function\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ logOut }) => {\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = (\r\n    evt: React.MouseEvent<HTMLAnchorElement, MouseEvent>\r\n  ) => {\r\n    evt.preventDefault();\r\n    logOut();\r\n    history.push(\"/\");\r\n  };\r\n\r\n  return (\r\n    <nav className=\"nav-extended blue darken-1\">\r\n      <div className=\"container nav-wrapper\">\r\n        <ul>\r\n          <li>\r\n            <NavLink to=\"/\" className=\"brand-logo left\">\r\n              Memory Game\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink\r\n              to=\"/\"\r\n              className=\"brand-logo right\"\r\n              onClick={logoutHandler}\r\n            >\r\n              <i className=\"large material-icons\">exit_to_app</i>\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"container nav-content blue darken-1\">\r\n        <ul className=\"tabs tabs-transparent\">\r\n          <li className=\"tab\">\r\n            <NavLink to=\"/\">Game</NavLink>\r\n          </li>\r\n          <li className=\"tab\">\r\n            <NavLink to=\"/results\">Results</NavLink>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: appState, ownProps: object) => ({\r\n  ...ownProps,\r\n  game: state.game,\r\n  user: state.user\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: Function) => ({\r\n  logOut: () => dispatch(actionCreator.logOut()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import React from \"react\";\r\n\r\nconst Footer: React.FC = () => (\r\n    <footer className=\"page-footer blue darken-1\">\r\n      <footer className=\"footer-copyright blue darken-1\">\r\n        <div className=\"container\">\r\n          {`© ${new Date().getFullYear()} all rights reserved`}\r\n          <a className=\"grey-text text-lighten-4 right\" href=\"https://github.com/RylkovAlex/\">\r\n            Made by Alexander Rylkov\r\n          </a>\r\n        </div>\r\n      </footer>\r\n    </footer>\r\n  );\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport Header from \"src/components/header-component/header-component\";\r\nimport Footer from \"src/components/footer-component/footer-component\";\r\n\r\ninterface LayoutProps {\r\n  children: React.ReactNode | React.ReactNode[];\r\n}\r\n\r\nconst Layout: React.FC<LayoutProps> = ({ children }) => (\r\n  <>\r\n    <Header />\r\n    <div className=\"container main\">{children}</div>\r\n    <Footer />\r\n  </>\r\n);\r\n\r\nexport default Layout;\r\n","import React from \"react\";\r\nimport \"./welcom-screen.css\";\r\nimport { appState } from \"src/redux/reducers/root-reducer/root-reducer\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst rules: string[] = [\r\n  `The gameplay is the sequence of rounds. In each round you should select 2\r\n  tiles.`,\r\n  `If you select 2 tiles with different images then they will flip to\r\n  \"closed\" state, and your mistakes will increase by 1.`,\r\n  `If you select 2 tiles with the same images, they will disappear, and\r\n  you proceed to the next round.`,\r\n  `The game is considered over when all the tiles have disappeared.`,\r\n];\r\n\r\ninterface WellcomeScreenProps {\r\n  user?: UserState;\r\n}\r\n\r\nconst WellcomeScreen: React.FC<WellcomeScreenProps> = ({ user }) => (\r\n  <>\r\n    <h3 className=\"center-align welcome\">\r\n      Hello, {user!.name}!<br/>Are you ready to play?\r\n    </h3>\r\n    <ul className=\"collection with-header rules-list\">\r\n      <li className=\"collection-header\">\r\n        <h4 className=\"center-align\">Game Rules:</h4>\r\n      </li>\r\n      {rules.map((rule) => (\r\n        <li className=\"collection-item\" key={rule}>\r\n          <div className=\"secondary-content\">\r\n            <i className=\"material-icons\">mood</i>\r\n          </div>\r\n          {rule}\r\n        </li>\r\n      ))}\r\n    </ul>\r\n    <Link to=\"/play\" href=\"#!\" className=\"btn-large blue darken-1 pulse hoverable\">\r\n      <i className=\"material-icons Large left\">play_arrow</i>START GAME\r\n    </Link>\r\n  </>\r\n);\r\n\r\nconst mapStateToProps = (state: appState, ownProps: object) => ({\r\n  ...ownProps,\r\n  user: state.user,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(WellcomeScreen);\r\n","export const getMixed = (array: any[]) => {\r\n  const result = [...array];\r\n  for (let i = result.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1));\r\n    [result[i], result[j]] = [result[j], result[i]];\r\n  }\r\n  return result;\r\n};\r\n","import React from 'react';\r\nimport constants from 'src/constants/constants';\r\nimport './game-card.css';\r\n\r\nexport interface Card {\r\n  isOpened: boolean;\r\n  isDone: boolean;\r\n  id: number;\r\n  name: string;\r\n}\r\n\r\ninterface GameCardProps {\r\n  data: Card;\r\n  handleClick: Function;\r\n}\r\n\r\nconst size = {\r\n  width: `${Math.floor(100 / constants.GAME_BOARD_SIZE.width)}%`,\r\n  height: `${Math.floor(100 / constants.GAME_BOARD_SIZE.height)}%`,\r\n};\r\n\r\nconst GameCard: React.FC<GameCardProps> = ({ data, handleClick }) => {\r\n  const { isDone, isOpened } = data;\r\n  const cardClasses = ['game-card'];\r\n  isDone && cardClasses.push('done');\r\n  isOpened && cardClasses.push('opened');\r\n\r\n  return (\r\n    <div\r\n      className={cardClasses.join(' ')}\r\n      onClick={() => handleClick(data)}\r\n      style={size}\r\n    >\r\n      {!isOpened ? (\r\n        <div className='front z-depth-5'>\r\n        <img\r\n          src={`${constants.PARH_TO_CARD_IMG}/question.png`}\r\n          alt={data.name}\r\n        />\r\n      </div>\r\n      ) : (\r\n        <div className='back z-depth-5'>\r\n          <img\r\n            src={`${constants.PARH_TO_CARD_IMG}/${data.name}.png`}\r\n            alt={data.name}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameCard;\r\n","import React from \"react\";\r\nimport \"./gameboard-component.css\";\r\nimport { getMixed } from \"src/utils/utils\";\r\nimport constants from \"src/constants/constants\";\r\nimport GameCard, { Card } from \"../game-card/game-card\";\r\nimport actionCreator from \"src/redux/action-creator/action-creator\";\r\nimport { connect } from \"react-redux\";\r\nimport { appState } from \"src/redux/reducers/root-reducer/root-reducer\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\ninterface GameBoardProps {\r\n  incrementMistakes: Function;\r\n  incrementRound: Function;\r\n  tickTimer: Function;\r\n  finishGame: Function;\r\n  resetGame: Function;\r\n  saveResult: Function;\r\n  game: GameState;\r\n  user: UserState;\r\n  history: {\r\n    push: Function;\r\n  };\r\n}\r\n\r\ninterface GameBoardState {\r\n  cards: Card[];\r\n  disabled: boolean;\r\n}\r\n\r\nclass GameBoard extends React.Component<GameBoardProps, GameBoardState> {\r\n  gameTimerId: number | null;\r\n  gameStateTimers: any;\r\n  static createCards(names: string[]): Card[] {\r\n    let id = 0;\r\n    const createCard = (name: string) => ({\r\n      isOpened: false,\r\n      isDone: false,\r\n      id: id++,\r\n      name: name,\r\n    });\r\n    return [...names.map(createCard), ...names.map(createCard)];\r\n  }\r\n\r\n  constructor(props: GameBoardProps) {\r\n    super(props);\r\n    this.state = {\r\n      cards: getMixed(GameBoard.createCards(constants.CARDS)),\r\n      // cards: GameBoard.createCards(constants.CARDS), // for debugging\r\n      disabled: false,\r\n    };\r\n    this.gameTimerId = null;\r\n    this.gameStateTimers = [];\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.resetGame();\r\n    this.gameTimerId = setInterval(this.props.tickTimer, 1000)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.gameTimerId!);\r\n    this.gameStateTimers.forEach((id: number) => {\r\n      clearTimeout(id)\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.props.game.round === this.state.cards.length / 2) {\r\n      const result: UserResult = {\r\n        date: Date.now(),\r\n        mistakes: this.props.game.mistakes,\r\n        time: this.props.game.timer,\r\n      };\r\n      this.props.saveResult(this.props.user, result);\r\n      this.props.finishGame();\r\n      this.props.history.push(\"win\");\r\n    }\r\n  }\r\n\r\n  handleClick(card: Card) {\r\n    if (this.state.disabled) {\r\n      return;\r\n    }\r\n    this.setState((state) => {\r\n      const cards = [...state.cards];\r\n      card.isOpened = true;\r\n      const index = cards.findIndex((c) => c.id === card.id);\r\n      cards[index] = card;\r\n      return {\r\n        ...state,\r\n        disabled: true,\r\n        cards,\r\n      };\r\n    }, this.check);\r\n  }\r\n\r\n  check() {\r\n    const opened = this.state.cards.filter((c) => c.isOpened && !c.isDone);\r\n    if (opened.length === 2) {\r\n      const first = { ...opened[0] };\r\n      const second = { ...opened[1] };\r\n      const cards = [...this.state.cards];\r\n      const firstIndx = cards.findIndex((card) => card.id === first.id);\r\n      const secondIndx = cards.findIndex((card) => card.id === second.id);\r\n\r\n      if (first.name === second.name) {\r\n        first.isDone = true;\r\n        second.isDone = true;\r\n        this.props.incrementRound();\r\n        this.gameStateTimers.push(\r\n          setTimeout(\r\n            () =>\r\n              this.setState((state) => {\r\n                cards[firstIndx] = first;\r\n                cards[secondIndx] = second;\r\n                return {\r\n                  ...state,\r\n                  cards,\r\n                  disabled: false,\r\n                };\r\n              }),\r\n            800\r\n          )\r\n        );\r\n      } else {\r\n        first.isOpened = false;\r\n        second.isOpened = false;\r\n        this.props.incrementMistakes();\r\n        this.gameStateTimers.push(\r\n          setTimeout(\r\n            () =>\r\n              this.setState((state) => {\r\n                cards[firstIndx] = first;\r\n                cards[secondIndx] = second;\r\n                return {\r\n                  ...state,\r\n                  cards,\r\n                  disabled: false,\r\n                };\r\n              }),\r\n            800\r\n          )\r\n        );\r\n      }\r\n    } else {\r\n      this.setState({ disabled: false });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game-board\">\r\n        {this.state.cards.map((card) => {\r\n          return (\r\n            <GameCard\r\n              key={card.id}\r\n              data={card}\r\n              handleClick={this.handleClick.bind(this)}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: appState) => ({\r\n  game: state.game,\r\n  user: state.user,\r\n});\r\nconst mapDispatchToProps = (dispatch: Function) => ({\r\n  incrementMistakes: () => dispatch(actionCreator.incrementMistakes()),\r\n  incrementRound: () => dispatch(actionCreator.incrementRound()),\r\n  tickTimer: () => dispatch(actionCreator.tickTimer()),\r\n  finishGame: () => dispatch(actionCreator.finishGame()),\r\n  resetGame: () => dispatch(actionCreator.resetGame()),\r\n  saveResult: (user: UserState, result: UserResult) =>\r\n    dispatch(actionCreator.saveResult(user, result)),\r\n});\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, mapDispatchToProps)(GameBoard)\r\n);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { appState } from \"src/redux/reducers/root-reducer/root-reducer\";\r\n\r\nimport './game-info.css'\r\n\r\ninterface GameInfoProps {\r\n  game?: GameState;\r\n}\r\n\r\nconst GameInfo: React.FC<GameInfoProps> = ({ game }) => {\r\n  return (\r\n    <div className=\"game-info\">\r\n      <div className=\"row\">\r\n        <div className=\"col s6 mistakes\">\r\n          <p>\r\n          {`Mistakes:`}\r\n          </p>\r\n          <p>{game!.mistakes}</p>\r\n        </div>\r\n        <div className=\"col s6 mistakes\">\r\n          <p>\r\n          {`Game Time:`}\r\n          </p>\r\n          <p>{`${game!.timer} sec`}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: appState, ownProps: object) => ({\r\n  ...ownProps,\r\n  game: state.game,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(GameInfo);\r\n","import React from \"react\";\r\nimport Gameboard from \"src/components/gameboard-component/gameboard-component\";\r\nimport \"./game-screen.css\"\r\nimport GameInfo from \"src/components/game-info/game-info\";\r\n\r\nexport const GameScreen = () => (\r\n  <div className=\"game-screen\">\r\n    <GameInfo/>\r\n    <Gameboard />\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { appState } from \"src/redux/reducers/root-reducer/root-reducer\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ninterface WinScreenProps {\r\n  user?: UserState;\r\n}\r\n\r\nconst WinScreen: React.FC<WinScreenProps> = ({ user }) => (\r\n  <>\r\n    <h2 className=\"center-align welcome\">\r\n    Congratulations, {user!.name}!<br/>You won the game!\r\n    </h2>\r\n    <h2>Your Results:</h2>\r\n    <h3>{`Mistakes: ${user!.results[user!.results.length - 1].mistakes}`}</h3>\r\n    <h3>{`Game Time: ${user!.results[user!.results.length - 1].time}`}</h3>\r\n    <hr/>\r\n    <Link to=\"/results\" className=\"btn-large blue darken-1 hoverable\">\r\n      SEE ALL RESULTS\r\n    </Link>\r\n  </>\r\n);\r\n\r\nconst mapStateToProps = (state: appState, ownProps: object) => ({\r\n  ...ownProps,\r\n  user: state.user,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(WinScreen);\r\n","import React, { useEffect } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { appState } from 'src/redux/reducers/root-reducer/root-reducer';\r\nimport { getRoutes } from 'src/routes';\r\nimport { storage } from 'src/utils/storage';\r\nimport actionCreator from 'src/redux/action-creator/action-creator';\r\n\r\ninterface AppProps {\r\n  user?: UserState\r\n  setUser: Function\r\n  isGameFinished: boolean\r\n}\r\n\r\nconst App: React.FC<AppProps> = ({ setUser, isGameFinished }) => {\r\n  useEffect(() => {\r\n    const currentUser = storage.getLoggedUser()\r\n    if (currentUser) {\r\n      setUser(currentUser)\r\n    }\r\n  }, [setUser])\r\n\r\n  const routes = getRoutes(!!storage.getLoggedUser(), isGameFinished)\r\n  return <>{routes}</>\r\n}\r\n\r\nconst mapStateToProps = (state: appState, ownProps: object) => ({\r\n  ...ownProps,\r\n  user: state.user,\r\n  isGameFinished: state.game.isFinished,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: Function) => ({\r\n  setUser: (user: UserState) => dispatch(actionCreator.setUser(user))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport AuthPage from \"./components/pages/auth-page/auth-page\";\r\nimport Layout from \"./components/layout-component/layout-component\";\r\nimport WelcomeScreen from \"./components/game-screens/welcome-screen/welcome-screen\";\r\nimport ResultPage from \"./components/pages/results-page/results-page\";\r\nimport { GameScreen } from \"./components/game-screens/game-screen/game-screen\";\r\nimport WinScreen from \"./components/game-screens/win-screen/win-screen\";\r\n\r\nexport const getRoutes = (isUser: boolean, isGameFinished: boolean) => {\r\n  if (isUser) {\r\n    return (\r\n      <Switch>\r\n        <Route path=\"/\" exact>\r\n          <Layout>\r\n            <WelcomeScreen />\r\n          </Layout>\r\n        </Route>\r\n        <Route path=\"/play\" exact>\r\n          <Layout>\r\n            <GameScreen/>\r\n          </Layout>\r\n        </Route>\r\n        {isGameFinished && <Route path=\"/win\" exact>\r\n          <Layout>\r\n            <WinScreen/>\r\n          </Layout>\r\n        </Route>}\r\n        <Route path=\"/results\" exact>\r\n          <Layout>\r\n            <ResultPage />\r\n          </Layout>\r\n        </Route>\r\n        <Redirect to=\"/\" />\r\n      </Switch>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/\" exact>\r\n        <div className=\"container main\">\r\n          <AuthPage />\r\n        </div>\r\n      </Route>\r\n      <Redirect to=\"/\" />\r\n    </Switch>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { createStore, compose, applyMiddleware } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport rootReducer from \"./redux/reducers/root-reducer/root-reducer\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./components/app-component/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nconst composeEnhancers =\r\n  typeof window === `object` &&\r\n  (window as any)[\"__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\"]\r\n    ? (window as any)[\"__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\"]({})\r\n    : compose;\r\nconst enhancer = composeEnhancers(applyMiddleware());\r\n\r\nconst store = createStore(rootReducer, enhancer);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}